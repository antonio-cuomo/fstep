syntax = "proto3";

package com.cgi.eoss.fstep;

import "common_messages.proto";

option java_multiple_files = true;
option java_package = "com.cgi.eoss.fstep.rpc";

service FstepJobLauncher {
	rpc BuildService (BuildServiceParams) returns (BuildServiceResponse);
    rpc SubmitJob (FstepServiceParams) returns (FstepJobResponse);
    rpc GetJobStatus (GetJobStatusParams) returns (JobStatusResponse);
    rpc GetJobOutputs (GetJobOutputsParams) returns (JobOutputsResponse);
    rpc CancelJob (CancelJobParams) returns (CancelJobResponse);
    rpc StopJob (StopServiceParams) returns (StopServiceResponse);
    rpc RelaunchFailedJob (RelaunchFailedJobParams) returns (RelaunchFailedJobResponse);
    rpc ListWorkers (ListWorkersParams) returns (WorkersList);
    rpc IngestJobOutputs (IngestJobOutputsParams) returns (IngestJobOutputsResponse);
    
}

message BuildServiceParams {
    string userId = 1;
    string serviceId = 2;
    string buildFingerprint = 3;
}

message BuildServiceResponse {
   
}

message FstepServiceParams {
    string jobId = 1;
    string userId = 2;
    string serviceId = 3;
    repeated JobParam inputs = 4;
    string jobConfigLabel = 5;
    string jobParent = 6;
}

message GetJobStatusParams {
    Job job = 1;
}

message GetJobOutputsParams {
    Job job = 1;
}

message FstepJobResponse {
        Job job = 1;
}

message JobOutputsResponse {
    message JobOutputs {
        repeated JobParam outputs = 1;
    }
    JobOutputs jobOutputs = 1;
}

message JobStatusResponse {
        Job job = 1;
        JobStatus jobStatus = 2;
}

message ListWorkersParams {
}

message WorkersList {
    repeated Worker workers = 1;
}

message Worker {
    string host = 1;
    int32 port = 2;
    string environment = 3;
}

message StopServiceParams {
    Job job = 1;
}

message StopServiceResponse {
}

message CancelJobParams {
    Job job = 1;
}

message RelaunchFailedJobParams {
    Job job = 1;
}

message IngestJobOutputsParams {
    Job job = 1;
}

message CancelJobResponse {
   
}

message RelaunchFailedJobResponse {

}

message IngestJobOutputsResponse {

}
